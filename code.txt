This is for downloading, downloads every ticker in tickers
I'm working on getting the list of tickers now
from alpha_vantage.timeseries import TimeSeries
from pprint import pprint
import json
import pandas as pd
from sklearn import preprocessing
import numpy as np

history_points = 20

def save_dataset():
    #credentials = json.load(open('creds.json', 'r'))
    #api_key = credentials['av_api_key']
    
    print(symbol, time_window)
    ts = TimeSeries(key="ZH9AWDIE9WH36H30", output_format='pandas')
    
    tickers = []
    for symbol in tickers:
        data, meta_data = ts.get_daily_adjusted(symbol, outputsize='full')

        pprint(data.head(10))

        data.to_csv(f'./{symbol}_{time_window}.csv')
def csv_to_dataset(csv_path):
    data = pd.read_csv(csv_path)
    data = data.drop('date', axis=1)
    data = data.drop(0, axis=0)

    data = data.values

    data_normaliser = preprocessing.MinMaxScaler()
    data_normalised = data_normaliser.fit_transform(data)

    return data_normalised
    
def multiple_csv_to_dataset(test_set_name):
    import os
    ohlcv_histories = 0
    technical_indicators = 0
    next_day_open_values = 0
    for csv_file_path in list(filter(lambda x: x.endswith('daily.csv'), os.listdir('./'))):
        if not csv_file_path == test_set_name:
            print(csv_file_path)
            if type(ohlcv_histories) == int:
                ohlcv_histories, technical_indicators, next_day_open_values, _, _ = csv_to_dataset(csv_file_path)
            else:
                a, b, c, _, _ = csv_to_dataset(csv_file_path)
                ohlcv_histories = np.concatenate((ohlcv_histories, a), 0)
                technical_indicators = np.concatenate((technical_indicators, b), 0)
                next_day_open_values = np.concatenate((next_day_open_values, c), 0)

    ohlcv_train = ohlcv_histories
    tech_ind_train = technical_indicators
    y_train = next_day_open_values

    ohlcv_test, tech_ind_test, y_test, unscaled_y_test, y_normaliser = csv_to_dataset(test_set_name)

    return ohlcv_train, y_train, unscaled_y_test, y_normaliser
    
    
if __name__ == "__main__":
    save_dataset()


